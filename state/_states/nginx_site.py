import os.path
import salt.utils

from string import Template

config_tpl = Template('''
# Generated by Salt, do not edit!
server {

listen $addr:$port;
$server_name

location /error_pages {
  alias /srv/http/error_pages;
  internal;
}

$config

}
''')

config_tpl_le = Template('''
# Generated by Salt, do not edit!
server {

listen 80;
server_name $name;

location /error_pages {
  alias /srv/http/error_pages;
  internal;
}

location /.well-known/acme-challenge {
  alias /srv/http/challenges;
}

# Only used when no other location block matches
location / {
  rewrite ^ https://$name$$request_uri? permanent;
}

}

server {

listen 443 ssl;
server_name $name;

ssl_certificate /etc/nginx/tls/$name.crt;
ssl_certificate /etc/nginx/tls/$name.key;

location /error_pages {
  alias /srv/http/error_pages;
  internal;
}

$config

}
''')

def _save_config(name, config):
  ret = {
    'name': name,
    'result': None,
    'comment': '',
    'changes': { }
  }

  filename = '/etc/nginx/sites-available/' + name
  linkname = '/etc/nginx/sites-enabled/' + name

  current_config = ''
  if os.path.exists(filename):
    with salt.utils.fopen(filename) as config_file:
      current_config = config_file.read()

  if config.strip() == current_config.strip():
    res = __states__['file.symlink'](name=linkname, target=filename)
    if res['result'] == False:
      ret['result'] = False
      ret['comment'] = 'Failed to enable site config.'
      return ret

    ret['result'] = True
    ret['comment'] = 'Site is up to date.'
    return ret
  elif __opts__['test']:
    ret['comment'] = 'Site will be updated.'
    ret['changes'] = {
      'old': current_config,
      'new': config
    }
    return ret

  try:
    with salt.utils.fopen(filename, 'w') as config_file:
      config_file.write(config)

    res = __states__['file.symlink'](name=linkname, target=filename)
    if res['result'] == False:
      ret['result'] = False
      ret['comment'] = 'Failed to enable site config.'
      return ret

    ret['result'] = True
    ret['comment'] = 'Successfully wrote site config.'
    ret['changes'] = {
      'old': current_config,
      'new': config
    }
  except IOError:
    ret['result'] = False
    ret['comment'] = 'Failed to write site config.'

  return ret

def _generate_config(name, use_server_name, **kwargs):
  return config_tpl.substitute(
    server_name=('server_name %s;' % name) if use_server_name else '', **kwargs)

def _create_config(name, *args, **kwargs):
  return _save_config(name, _generate_config(name, *args, **kwargs))

def present(name, configfile, address='*', port=80, use_server_name=True):
  '''
  Ensure an nginx site is present and enabled.

  name
    Name of the site

  configfile
    Config file, in case you need more fine-grained control over the configuration.
    Will be included as part of the server block.

  address
    Address part of the nginx listen directive. Default is '*' (all local interfaces).
    Other common options would be '0.0.0.0' for IPv4 interfaces only or 'localhost' for
    sites that aren't meant to be accessed from anywhere but the system nginx runs on.

  port
    Port part of the nginx listen directive

  use_server_name
    Whether or not to generate a server_name line in the configuration. You probably
    only want to set this to false to listen on a non-standard port.
  '''
  config = __salt__['cp.get_file_str'](configfile, saltenv=__env__)
  return _create_config(name, use_server_name, addr=address, port=port, config=config)

def present_le(name, configfile):
  '''
  Ensure an nginx site with https over Let's Encrypt is present and enabled. Read the
  source code of this module if you want to use this state function; simply using this
  isn't going to make https work!

  name
    Name of the site

  configfile
    Config file, in case you need more fine-grained control over the configuration.
    Will be included as part of the server block.
  '''
  config = __salt__['cp.get_file_str'](configfile, saltenv=__env__)
  return _save_config(name, config_tpl_le.substitute(name=name, config=config))

def reverse_proxy(name, target, address='*', port=80, use_server_name=True):
  '''
  Ensure queries to a (sub)domain are passed on to another webserver.

  name
    Name of the site

  target
    The target server that serves the website. Usually `http://localhost:PORT`.

  address
    Address part of the nginx listen directive. Default is '*' (all local interfaces).
    Other common options would be '0.0.0.0' for IPv4 interfaces only or 'localhost' for
    sites that aren't meant to be accessed from anywhere but the system nginx runs on.

  port
    Port part of the nginx listen directive

  use_server_name
    Whether or not to generate a server_name line in the configuration. You probably
    only want to set this to false to listen on a non-standard port.
  '''
  config = 'location / { proxy_pass %s; }' % target
  return _create_config(name, use_server_name, addr=address, port=port, config=config)

def reverse_proxy_le(name, target):
  '''
  Ensure an nginx site with https over Let's Encrypt is present and enabled. Read the
  source code of this module if you want to use this state function; simply using this
  isn't going to make https work!

  name
    Name of the site

  configfile
    Config file, in case you need more fine-grained control over the configuration.
    Will be included as part of the server block.
  '''
  config = 'location / { proxy_pass %s; }' % target
  return _save_config(name, config_tpl_le.substitute(name=name, config=config))

def redirect(name, target, address='*', port=80, use_server_name=True):
  '''
  Ensure a (sub)domain redirects to somewhere else.
  Currently all redirects are permanent ones.

  name
    Name of the site

  target
    The target site to redirect to, without a trailing '/'. When a server requests
    $name/somesite, the server will respond with a redirect to $target/sometime.

  address
    Address part of the nginx listen directive. Default is '*' (all local interfaces).
    Other common options would be '0.0.0.0' for IPv4 interfaces only or 'localhost' for
    sites that aren't meant to be accessed from anywhere but the system nginx runs on.

  port
    Port part of the nginx listen directive

  use_server_name
    Whether or not to generate a server_name line in the configuration. You probably
    only want to set this to false to listen on a non-standard port.
  '''
  config = 'rewrite ^ %s$request_uri? permanent;' % target
  return _create_config(name, use_server_name, addr=address, port=port, config=config)
