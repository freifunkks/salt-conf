import os.path
import salt.utils

config_tpl = '''
# Generated by Salt, do not edit!
server {
  listen 80;
  server_name %s;

%s
}
'''

redirect_tpl = 'rewrite ^ %s$request_uri? permanent;'
reverse_proxy_tpl = 'location / { proxy_pass %s; };'

def _apply_config(name, config):
  ret = {
    'name': name,
    'result': None,
    'comment': '',
    'changes': { }
  }

  filename = '/etc/nginx/sites-available/' + name
  linkname = '/etc/nginx/sites-enabled/' + name

  current_config = ''
  if os.path.exists(filename):
    with salt.utils.fopen(filename) as config_file:
      current_config = config_file.read()

  if config.strip() == current_config.strip():
    res = __states__['file.symlink'](name=linkname, target=filename)
    if res['result'] == False:
      ret['result'] = False
      ret['comment'] = 'Failed to enable site config.'
      return ret

    ret['result'] = True
    ret['comment'] = 'Site is up to date.'
    return ret
  elif __opts__['test']:
    ret['comment'] = 'Site will be updated.'
    ret['changes'] = {
      'old': current_config,
      'new': config
    }
    return ret

  try:
    with salt.utils.fopen(filename, 'w') as config_file:
      config_file.write(config)

    res = __states__['file.symlink'](name=linkname, target=filename)
    if res['result'] == False:
      ret['result'] = False
      ret['comment'] = 'Failed to enable site config.'
      return ret

    ret['result'] = True
    ret['comment'] = 'Successfully wrote site config.'
    ret['changes'] = {
      'old': current_config,
      'new': config
    }
  except IOError:
    ret['result'] = False
    ret['comment'] = 'Failed to write site config.'

  return ret

# TODO: Add TLS support
def present(name, configfile):
  '''
  Ensure an nginx site is present and enabled.

  name
    Name of the site

  configfile
    Config file, in case you need more fine-grained control over the configuration.
    Will be included as part of the server block.
  '''
  additional_config_bits = __salt__['cp.get_file_str'](configfile, saltenv=__env__)
  return _apply_config(name, config_tpl % (name, additional_config_bits))

def redirect(name, target):
  '''
  Ensure a (sub)domain redirects to somewhere else.
  Currently all redirects are permanent ones.

  name
    Name of the site

  target
    The target site to redirect to, without a trailing '/'. When a server requests
    $name/somesite, the server will respond with a redirect to $target/sometime.
  '''
  return _apply_config(name, config_tpl % (name, redirect_tpl % target))

def reverse_proxy(name, target):
  '''
  Ensure queries to a (sub)domain are passed on to another webserver.

  name
    Name of the site

  target
    The target server that serves the website. Usually `http://localhost:PORT`.
  '''
  return _apply_config(name, config_tpl % (name, reverse_proxy_tpl % target))
